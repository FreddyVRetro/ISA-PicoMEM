; PIO Code for ISA Signals, Pico MEM Board
; By Freddy VETELE
; For multiplexer Version 1 and no AEN signal (PicoMEM LP and 1.2A)
; Work with RP2040 and RP2350

; This use one SM, and don't use ALE for pre address read.
; Control signals activation detection and date/Addres Low read done by the CPU
; To Optimize the overall speed

; Values for the Proto Board :
;.define public PIN_IRQ    5
;.define public PIN_AEN    6
;.define public PIN_ALE    7

; Values for the V1.0 Board: (Shift by 5 Pin).  
.define public PIN_IRQ    0
.define public PIN_AEN    1
.define public PIN_ALE    2
; Pin 3 to 7 are for SD/PSRAM
.define public PIN_AD0    8
.define public PIN_A16_MR 16
.define public PIN_A17_MW 17 
.define public PIN_A18_IR 18
.define public PIN_A19_IW 19
.define public PIN_AD     20  // 1: Adress 0: Data
.define public SEL_ADR    1   // Address Multiplexer active, Data buffer 3 States
.define public SEL_DAT    0   // Select Data
.define public PIN_AS     21  // 0: A0-A7 IO/Mem R/W 1:A8-A19
.define public SEL_ADL    0   // Select Address Low and I/O Mem Signals
.define public SEL_ADH    1   // Select Address High and A16-A19
.define public PIN_IORDY  22  // Reversed : 1> Wait 0> Ok

; The Pico Core detect when IOR, IOW, MEMR or MEMW Move.
; Then, the Core ask the PIO to check if AEN is present and read A8-A19
; Based on the Cycle type and Address, the core tell the PIO to enable or not IOCHRDY
; The Core send the type of cycle to perform : Write, IOR or MEMR By sending 0 or a PIO instruction
; If the core send 0, start from the begining
; If the core send something else, perform a Read cycle, waiting for the Memory or IO Read pin to go Up.

.program isa_bus
.side_set 2 opt                      ; sideset AS / AD Initial value : 0b01 (0/ADL/ADR)
; 0b01 : Read A0-A7 and Command Signals
; 0b11 : Read A8-A19
; 0b00 : Read/Write Data and Read Command Signals 

    out Y, 32           side 0b01    ; Wait for the value to use for the "Invalid" Cycle.
restart:   
.wrap_target
    set pins,0          side 0b01    ; Disable IOCHRDY
; 1> Wait for the CPU Go (Control Signal detected)
    out X, 32           side 0b01    
    in pins, 8          side 0b11    ; Read A0-A7                   > Switch A8-A19
    nop           [2]   side 0b11    ; Delay, 3 clock tick
    nop           [2]   side 0b11    ; Delay, 3 clock tick
    in pins, 12         side 0b00    ; Read Address High (A8-A19)     > Switch to Read/Write Data
; Address low was read during the ctrl pin detection
; Data is read after by the Pico core (Not PIO)
    out X, 32           side 0b00    ; 2> Put the value sent by the main code to X : Do a Read if <> 0
    jmp !X NoWaitState  side 0b00    ; If we read 0 from the tx fifo, Don't add Wait State
    set pins,1          side 0b00    ; Enable IOCHRDY    
NoWaitState:
    out X, 32           side 0b00    ; 3> Read 0, or PIN_A18_IR or PIN_A16_MR Wait instruction
;    jmp !x restart      side 0b00   ; X=0 >  IOR/MEMR or nothing
    jmp x-- Do_IO_MEM_Read
    jmp restart
Do_IO_MEM_Read:
; Perform an IO or Memory Read
    out pins, 8         side 0b00   ; Output data to be written
    out pindirs, 8      side 0b00   ; Next 8 in pindirs is FF - set pindirs as output
    set pins,0          side 0b00   ; Disable IOCHRDY (If active)  > Try to put it before ?
    jmp x-- IsMEMR
    wait 0 gpio PIN_A18_IR  side 0b00 ; Wait for IOR lowering edge  *Ok
    jmp IO_MEM_Read_End
IsMEMR:
    wait 0 gpio PIN_A16_MR  side 0b00 ; Wait for MEMR lowering edge *Ok 
IO_MEM_Read_End: 
    in  null, 20         side 0b01  ; Tell the CPU that the Read is complete and Move back the Mux to Control / A0-A7
    out pins, 8          side 0b01  ; next 8 in pindirs is FF - reset data pins back to high
    out pindirs, 8       side 0b01  ; next 8 in pindirs is 00 - set pindirs back as input
.wrap

% c-sdk {
static inline void isa_bus_program_init(PIO pio, uint sm, uint offset) {
    pio_sm_config c = isa_bus_program_get_default_config(offset);

// 133MHz: 4 Wait ([3]) 
// 180MHz: 4 Wait 
// 240MHz and 270MHz with 6 (3+2) Wait
    float div = (float)clock_get_hz(clk_sys) / (280 * 1000000);  //100 MHz > 133 ?
    sm_config_set_clkdiv(&c, div);

    sm_config_set_in_shift(&c, true, true, 20);                   // Autopush 20 bits (20 addr) Ctrl and Data read by the CPU
    sm_config_set_out_shift(&c, true, true /* autopull */, 32);    // Autopull 32 bits (condition variables from CPU)

    // ** Init and Configure AD0/AD8 as In/Out **

    // Initialise the 12 Muxed pin 
    for (int i = PIN_AD0; i < PIN_AD0 + 12; i++) {
        pio_gpio_init(pio, i);    // Link the PIN to this PIO (All SM !)
    }
    sm_config_set_in_pins(&c, PIN_AD0);                            // Set AD0 is the first Input pin (IN)
    sm_config_set_out_pins(&c, PIN_AD0, 8);                        // Set AD0 to AD7 as Output pins as well (OUT and PINDIRS)
    sm_config_set_sideset_pins(&c, PIN_AD); // First pin of the SideSet

    // Init and set up IOCHRDY, AD and AS as Output
    pio_gpio_init(pio, PIN_AD);    // Link the PIN to this PIO (All SM !)
    pio_gpio_init(pio, PIN_AS);    // Link the PIN to this PIO (All SM !)
    pio_gpio_init(pio, PIN_IORDY); // Link the PIN to this PIO (All SM !)
    pio_sm_set_consecutive_pindirs(pio, sm, PIN_AD, 3, true);       // Output

    // PIN_IORDY as SET Pin
    sm_config_set_set_pins(&c, PIN_IORDY,1);                       // Set PIN_IORDY as SET pin

    // Enable and Set the pin direction for ALE/AEN and AD0 to A19_IW as input at the PIO
    pio_gpio_init(pio, PIN_AEN);
    pio_gpio_init(pio, PIN_ALE);
    pio_sm_set_consecutive_pindirs(pio, sm, PIN_AEN, 2, false);     // AEN, ALE
    pio_sm_set_consecutive_pindirs(pio, sm, PIN_AD0, 12, false);    // AD0-11

    // Set the Output default values (Read Addr Low)
    pio_sm_set_pins_with_mask(pio, sm, 0, 1u << PIN_IORDY);
    pio_sm_set_pins_with_mask(pio, sm, 0, 1u << PIN_AS);
    pio_sm_set_pins_with_mask(pio, sm, 1u << PIN_AD, 1u << PIN_AD);

    // JMP on AEN so we can ignore cycles during DMA
    sm_config_set_jmp_pin(&c, PIN_AEN);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}
%}